1. BITWISE AND

#include<stdio.h>
int main()
{
	int a = 10;
	if(a > 100 && ++a < 200 && a++==12)
	{
		printf("Hello %d",a);
	}
	else
	{
		printf("Hai %d",a);
	}
	return 0;
}


Expected Output : Hai 10

-----------------------------------------------------------

2. BITWISE AND

#include<stdio.h>
int main()
{
	int a = 10;
	if(a > 100 & ++a < 200 & a++==12)
	{
		printf("Hello %d",a);
	}
	else
	{
		printf("Hai %d",a);
	}
	return 0;
}


Expected Output : Hai 12

-----------------------------------------------------------

3. LOGICAL OR

#include<stdio.h>
int main()
{
	int a = 10;
	if(a > 100 || ++a < 200 || a++==12)
	{
		printf("Hello %d",a);
	}
	else
	{
		printf("Hai %d",a);
	}
	return 0;
}


Expected Output :  Hai 11

-----------------------------------------------------------

4. BITWISE  OR

#include<stdio.h>
int main()
{
	int a = 10;
	if(a > 100 | ++a < 200 | a++==12)
	{
		printf("Hello %d",a);
	}
	else
	{
		printf("Hai %d",a);
	}
	return 0;
}


Expected Output :  Hai 12

-----------------------------------------------------------

5. 

#include<stdio.h>
int main()
{
	int a =~ 100;
	printf("%d",a);
	return 0;
}


Expected Output : 101

-----------------------------------------------------------

6. EVEN OR ODD USING BITWISE OPERATORS

#include<stdio.h>
int main()
{
	int a = 12;
	if(a  & 1 == 1)
	{
		printf("odd");
	}
	else
	{
		printf("even");
	}
	return 0;
}

Expected Output : even

-----------------------------------------------------------

7. 

#include<stdio.h>
int main()
{
	int a,count = 0;
	scanf("%d",&a);
	while(a)
	{
		count++;
		a = a & (a-1);
	}
	printf("%d",count);
	return 0;
}

Expected Output : INPUT    --> 15
				OUTPUT --> 4

-----------------------------------------------------------

8.

#incldue<stdio.h>
int main()
{
	int a = 15, i = 4;
	if(a &(1 << (i - 1)))
	{
		printf("yes");
	}
	else
	{
		printf("no");
	}
	return 0;
}


Expected Output : yes

-----------------------------------------------------------

9. DETERMINE A NUMBER IS POWER OF 2 OR NOT

#incldue<stdio.h>
int main()
{
	int n;
	scanf("%d",&n);
	if( n > 0 && ( n & (n-1 ) ) ==0);
	{
		printf("yes");
	}
	else
	{
		printf("no");
	}
	return 0;
}


Expected Output : INPUT     --> 8
				OUTPUT  --> yes

-----------------------------------------------------------

10. DETERMINE A NUMBER IS POWER OF 2 OR NOT

#incldue<stdio.h>
int main()
{
	int n=32 , count = 0;
	while(n)
	{
		count++;
		 n = n & (n-4);
	}
	if(count == 1);
	{
		printf("yes");
	}
	else
	{
		printf("no");
	}
	return 0;
}

Expected Output : yes

-----------------------------------------------------------

11. DETERMINE A NUMBER IS POWER OF 4 OR NOT

#include<stdio.h>
int main()
{
	int n;
	scanf("%d",&n);
	if(  ( n & (n-1 ) ) ==0)
	{
		printf("yes");
	}
	else
	{
		printf("no");
	}
	return 0;
}


Expected Output : INPUT     --> 256
				OUTPUT  --> yes

-----------------------------------------------------------

12.

#include<stdio.h>
int main()
{
	int a[]={1,2,3,4,5,6,7,9};
	int x=0,i=0;
	for(i=0;i<=8;i++)
	x=x^i;
	for(i=0;i<8-1;i++)
	x=x^a[i];	
	printf("%d",x);
	return 0;
}

Expected Output : 8

-----------------------------------------------------------

13. FIBONACCI SERIES USING RECURSION

#include <stdio.h>
int fibonacci(int n) {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}
int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        printf("%d ", fibonacci(i));
    }
    return 0;
}

Expected Output : INPUT     --> 5
				OUTPUT  -->0 1 1 2 3

-----------------------------------------------------------

